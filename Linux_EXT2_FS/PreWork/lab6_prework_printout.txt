Ryan Neisess, CptS 360, Lab 6 PreWork, Code and Results/Output Printout

    KCW's provided sh script, with modifications:

#! /bin/bash
dd if=/dev/zero of=mydisk bs=1024 count=1440
sudo mkfs -b 1024 mydisk 1440
sudo mount -o loop mydisk /mnt
(cd /mnt; sudo mkdir dir1 dir2 dir3 dir4; sudo touch file1 file2 file3 file4; ls -l)
sudo umount /mnt

    * * * 1. super.c  : print superblock information, * * *
CODE:

/********* super.c code ***************/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode INODE;
typedef struct ext2_dir_entry_2 DIR; // need this for new version of e2fs

GD *gp;
SUPER *sp;
INODE *ip;
DIR *dp;

#define BLKSIZE 1024

char buf[BLKSIZE];
int fd;

int get_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    read(fd, buf, BLKSIZE);
}

int super()
{
    // read SUPER block
    get_block(fd, 1, buf);
    sp = (SUPER *)buf;

    // check for EXT2 magic number:

    printf("s_magic = %x\n", sp->s_magic);
    if (sp->s_magic != 0xEF53)
    {
        printf("NOT an EXT2 FS\n");
        exit(1);
    }

    printf("EXT2 FS OK\n");

    printf("s_inodes_count = %d\n", sp->s_inodes_count);
    printf("s_blocks_count = %d\n", sp->s_blocks_count);

    printf("s_free_inodes_count = %d\n", sp->s_free_inodes_count);
    printf("s_free_blocks_count = %d\n", sp->s_free_blocks_count);
    printf("s_first_data_blcok = %d\n", sp->s_first_data_block);

    printf("s_log_block_size = %d\n", sp->s_log_block_size);
    printf("s_blocks_per_group = %d\n", sp->s_blocks_per_group);
    printf("s_inodes_per_group = %d\n", sp->s_inodes_per_group);

    printf("s_mnt_count = %d\n", sp->s_mnt_count);
    printf("s_max_mnt_count = %d\n", sp->s_max_mnt_count);

    printf("s_magic = %x\n", sp->s_magic);

    printf("s_mtime = %s", ctime(&sp->s_mtime));
    printf("s_wtime = %s", ctime(&sp->s_wtime));
}

char *disk = "mydisk";

int main(int argc, char *argv[])
{
    if (argc > 1)
        disk = argv[1];
    fd = open(disk, O_RDONLY);
    if (fd < 0)
    {
        printf("open failed\n");
        exit(1);
    }
    super();
}

OUTPUT:

s_magic = ef53
EXT2 FS OK
s_inodes_count = 184
s_blocks_count = 1440
s_free_inodes_count = 150
s_free_blocks_count = 1384
s_first_data_blcok = 1
s_log_block_size = 0
s_blocks_per_group = 8192
s_inodes_per_group = 184
s_mnt_count = 1
s_max_mnt_count = -1
s_magic = ef53
s_mtime = Wed Oct 24 23:59:09 2018
s_wtime = Wed Oct 24 23:59:09 2018

    * * * 2. WRITE YOUR gd.c to print group descriptor information. * * *
CODE:

/********* super.c code ***************/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode INODE;
typedef struct ext2_dir_entry_2 DIR; // need this for new version of e2fs

GD *gp;
SUPER *sp;
INODE *ip;
DIR *dp;

#define BLKSIZE 1024

char buf[BLKSIZE];
int fd;

int get_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    read(fd, buf, BLKSIZE);
}

int gd()
{
    // read GD block
    get_block(fd, 1, buf);
    gp = (GD *)buf;

    printf("bg_block_bitmap = %d\n", gp->bg_block_bitmap); // Bmap block number
    printf("bg_inode_bitmap = %d\n", gp->bg_inode_bitmap); // Imap block number
    printf("bg_inode_table = %d\n", gp->bg_inode_table); // Inodes begin block number
    printf("bg_free_blocks_count = %d\n", gp->bg_free_blocks_count);
    printf("bg_free_inodes_count = %d\n", gp->bg_free_inodes_count);
    printf("bg_used_dirs_count = %d\n", gp->bg_used_dirs_count);
}

char *disk = "mydisk";

int main(int argc, char *argv[])
{
    if (argc > 1)
        disk = argv[1];
    fd = open(disk, O_RDONLY);
    if (fd < 0)
    {
        printf("open failed\n");
        exit(1);
    }
    gd();
}

OUTPUT:

bg_block_bitmap = 184
bg_inode_bitmap = 1440
bg_inode_table = 72
bg_free_blocks_count = 1384
bg_free_inodes_count = 0
bg_used_dirs_count = 150

    * * * 3. imap.c   : print Imap as a sequence of 0/1 chars (80 chars per row) * * *
CODE: 

/**************** imap.c file *************************/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode INODE;
typedef struct ext2_dir_entry_2 DIR; // need this for new version of e2fs

#define BLKSIZE 1024

GD *gp;
SUPER *sp;
INODE *ip;
DIR *dp;

char buf[BLKSIZE];
int fd;

int get_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    read(fd, buf, BLKSIZE);
}

int tst_bit(char *buf, int bit)
{
    int i, j;
    i = bit / 8;
    j = bit % 8;
    if (buf[i] & (1 << j))
        return 1;
    return 0;
}

int imap()
{
    char buf[BLKSIZE];
    int imap, ninodes;
    int i;

    // read SUPER block
    get_block(fd, 1, buf);
    sp = (SUPER *)buf;

    ninodes = sp->s_inodes_count;
    printf("ninodes = %d\n", ninodes);

    // read Group Descriptor 0
    get_block(fd, 2, buf);
    gp = (GD *)buf;

    imap = gp->bg_inode_bitmap;
    printf("imap = %d\n", imap);

    // read inode_bitmap block
    get_block(fd, imap, buf);

    for (i = 0; i < ninodes; i++)
    {
        (tst_bit(buf, i)) ? putchar('1') : putchar('0');
        if (i && (i % 8) == 0)
            printf(" ");
        if (i % 64 == 0 && i > 1)
            printf("\n ");
    }
    printf("\n");
}

char *disk = "mydisk";

int main(int argc, char *argv[])
{
    if (argc > 1)
        disk = argv[1];

    fd = open(disk, O_RDONLY);
    if (fd < 0)
    {
        printf("open %s failed\n", disk);
        exit(1);
    }

    imap();
}

OUTPUT:

ninodes = 184
bmap = 9
111111111 11111111 11111111 11111111 10000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 0000000

    * * * 4. WRITE YOUR bmap.c to display Bmap; the blocks bitmap. * * *
CODE: 

/**************** imap.c file *************************/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode INODE;
typedef struct ext2_dir_entry_2 DIR; // need this for new version of e2fs

#define BLKSIZE 1024

GD *gp;
SUPER *sp;
INODE *ip;
DIR *dp;

char buf[BLKSIZE];
int fd;

int get_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    read(fd, buf, BLKSIZE);
}

int tst_bit(char *buf, int bit)
{
    int i, j;
    i = bit / 8;
    j = bit % 8;
    if (buf[i] & (1 << j))
        return 1;
    return 0;
}

int imap()
{
    char buf[BLKSIZE];
    int bmap, nblocks;
    int i;

    // read SUPER block
    get_block(fd, 1, buf);
    sp = (SUPER *)buf;

    nblocks = sp->s_blocks_count;
    printf("nblocks = %d\n", nblocks);

    // read Group Descriptor 0
    get_block(fd, 2, buf);
    gp = (GD *)buf;

    bmap = gp->bg_block_bitmap;
    printf("bmap = %d\n", bmap);

    // read block_bitmap block
    get_block(fd, bmap, buf);

    for (i = 0; i < nblocks; i++)
    {
        (tst_bit(buf, i)) ? putchar('1') : putchar('0');
        if (i && (i % 8) == 0)
            printf(" ");
        if (i % 64 == 0 && i > 1)
            printf("\n ");
    }
    printf("\n");
}

char *disk = "mydisk";

int main(int argc, char *argv[])
{
    if (argc > 1)
        disk = argv[1];

    fd = open(disk, O_RDONLY);
    if (fd < 0)
    {
        printf("open %s failed\n", disk);
        exit(1);
    }

    imap();
}

OUTPUT:

nblocks = 1440
bmap = 8
111111111 11111111 11111111 11111111 11111111 11111111 11110000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
 00000000 00000000 00000000 0001101

    * * * 5. inode.c  : print root inode information * * *
CODE: 

/********* inode.c: print information in / INODE (INODE #2) *********/

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

#define BLKSIZE 1024

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode INODE;
typedef struct ext2_dir_entry_2 DIR; // need this for new version of e2fs

GD *gp;
SUPER *sp;
INODE *ip;
DIR *dp;

int fd;
int iblock;

int get_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    read(fd, buf, BLKSIZE);
}

int inode()
{
    char buf[BLKSIZE];

    // read GD
    get_block(fd, 2, buf);
    gp = (GD *)buf;
    /****************
  printf("%8d %8d %8d %8d %8d %8d\n",
	 gp->bg_block_bitmap,
	 gp->bg_inode_bitmap,
	 gp->bg_inode_table,
	 gp->bg_free_blocks_count,
	 gp->bg_free_inodes_count,
	 gp->bg_used_dirs_count);
  ****************/
    iblock = gp->bg_inode_table; // get inode start block#
    printf("inode_block=%d\n", iblock);

    // get inode start block
    get_block(fd, iblock, buf);

    ip = (INODE *)buf + 1; // ip points at 2nd INODE

    printf("mode=0x%4x\n", ip->i_mode);
    printf("uid=%d  gid=%d\n", ip->i_uid, ip->i_gid);
    printf("size=%d\n", ip->i_size);
    printf("time=%s", ctime(&ip->i_ctime));
    printf("link=%d\n", ip->i_links_count);
    printf("i_block[0]=%d\n", ip->i_block[0]);

    /*****************************
  u16  i_mode;        // same as st_imode in stat() syscall
  u16  i_uid;                       // ownerID
  u32  i_size;                      // file size in bytes
  u32  i_atime;                     // time fields  
  u32  i_ctime;
  u32  i_mtime;
  u32  i_dtime;
  u16  i_gid;                       // groupID
  u16  i_links_count;               // link count
  u32  i_blocks;                    // IGNORE
  u32  i_flags;                     // IGNORE
  u32  i_reserved1;                 // IGNORE
  u32  i_block[15];                 // IMPORTANT, but later
 ***************************/
}

char *disk = "mydisk";
int main(int argc, char *argv[])
{
    if (argc > 1)
        disk = argv[1];

    fd = open(disk, O_RDONLY);
    if (fd < 0)
    {
        printf("open %s failed\n", disk);
        exit(1);
    }

    inode();
}

OUTPUT:

inode_block=10
mode=0x41ed
uid=0  gid=0
size=1024
time=Wed Oct 24 23:59:09 2018
link=7
i_block[0]=33

    * * * 6. WRITE YOUR dir.c to print ALL DIR records under the / directory * * *
CODE:

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

#define BLKSIZE 1024

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode INODE;
typedef struct ext2_dir_entry_2 DIR; // need this for new version of e2fs

GD *gp;
SUPER *sp;
INODE *ip;
DIR *dp;

int fd;
int iblock;

int get_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    read(fd, buf, BLKSIZE);
}

int dir()
{
    char dbuf[BLKSIZE];

    // First, read the block into a char dbuf[1024].

    // read GD
    get_block(fd, 2, dbuf);
    gp = (GD *)dbuf;

    iblock = gp->bg_inode_table; // get inode start block#
    printf("inode_block=%d\n", iblock);

    // get inode start block
    get_block(fd, iblock, dbuf);

    // ip = (INODE *)buf; would make ip point at the /first/ inode
    // root is found at second inode however
    ip = (INODE *)dbuf + 1; // point ip to the second inode, which points to root

    // Important! Remember that i_block is an array of disk/data block numbers!
    // Indices 0-11 (the first 12 blocks) are direct blocks, or the actual 
    //   disk block numbers. Indices 12, 13, and 14 point to blocks of more 
    //   block numbers, with single, double, and triple indirection respectively

    // Let DIR *dp and char *cp BOTH point at dbuf;
    // Use dp-> to access the fields of the record, e.g. print its name

    DIR * dp;
    char * cp;
    int i = 0, j = 0;

    for (i = 0; i < 12; i++) { // for now assume only direct blocks
        if (ip->i_block[i] == 0) {
            // if this is 0, data not found or no more data
            break;
        }
        dp = (DIR *)dbuf;
        cp = dbuf;
        int debug = ip->i_block[i];
        printf("data block number=%d\n", ip->i_block[i]);
        get_block(fd, ip->i_block[i], dbuf); // get the inode's /data/ block
        //ip->i_block[i] gets set to 0 after?? why???
        int debug2 = ip->i_block[i];
        //printf("data block number=%d\n", ip->i_block[i]);
        printf("inode       rec_len     name_len    file_type   name\n");

        while (cp < dbuf + BLKSIZE) { // while still within the data block
            printf("%8d    ", dp->inode);
            printf("%8d    ", dp->rec_len);
            printf("%8d    ", dp->name_len);
            printf("%8d    ", dp->file_type);
            for (j = 0; j < dp->name_len; j++) {
                printf("%c", dp->name[j]);
            }
            putchar('\n');

            cp += dp->rec_len;
            dp = (DIR *)cp;
        }
    }
}

int search(INODE * dir_inode, char * name)
{
    char dbuf[BLKSIZE];

    get_block(fd, dir_inode->i_block[0], dbuf); // get the inode's /data/ block

    // Let DIR *dp and char *cp BOTH point at dbuf;
    // Use dp-> to access the fields of the record, e.g. print its name

    DIR * dp;
    char * cp, temp[256] = "";
    int i = 0, j = 0;

    for (i = 0; i < 12; i++) { // for now assume only direct blocks
        if (ip->i_block[i] == 0) {
            // if this is 0, data not found or no more data
            break;
        }
        dp = (DIR *)dbuf;
        cp = dbuf;
        int debug = ip->i_block[i];

        printf("data block number=%d\n", ip->i_block[i]);

        get_block(fd, ip->i_block[i], dbuf); // get the inode's /data/ block

        int debug2 = ip->i_block[i];

        printf("inode       rec_len     name_len    file_type   name\n");

        while (cp < dbuf + BLKSIZE) { // while still within the data block
            for (j = 0; j < dp->name_len; j++) {
                temp[j] = dp->name[j];
            }
            temp[j] = '\0';
            if (strcmp(temp, name) == 0) { // match found
                return dp->inode;
            }

            cp += dp->rec_len;
            dp = (DIR *)cp;
        }
    }

    return 0;
}

char *disk = "mydisk";

int main(int argc, char *argv[])
{
    if (argc > 1)
        disk = argv[1];

    fd = open(disk, O_RDONLY);
    if (fd < 0)
    {
        printf("open %s failed\n", disk);
        exit(1);
    }

    dir();
}

OUTPUT:

inode_block=10
data block number=33
inode       rec_len     name_len    file_type   name
       2          12           1           2    .
       2          12           2           2    ..
      11          20          10           2    lost+found
      12          12           4           2    dir1
      13          12           4           2    dir2
      14          12           4           2    dir3
      15          12           4           2    dir4
      16          16           5           1    file1
      17          16           5           1    file2
      18          16           5           1    file3
      19         884           5           1    file4

    * * * 7. ialloc.c : allocate a free INODE; return its ino * * *
CODE: 

/******* ialloc.c: allocate a free INODE, return its inode number ******/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode INODE;
typedef struct ext2_dir_entry_2 DIR; // need this for new version of e2fs

#define BLKSIZE 1024

GD *gp;
SUPER *sp;
INODE *ip;
DIR *dp;

/********** globals *************/
int fd;
int imap, bmap; // IMAP and BMAP block number
int ninodes, nblocks, nfreeInodes, nfreeBlocks;

int get_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    read(fd, buf, BLKSIZE);
}

int put_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    write(fd, buf, BLKSIZE);
}

int tst_bit(char *buf, int bit)
{
    int i, j;
    i = bit / 8;
    j = bit % 8;
    if (buf[i] & (1 << j))
        return 1;
    return 0;
}

int set_bit(char *buf, int bit)
{
    int i, j;
    i = bit / 8;
    j = bit % 8;
    buf[i] |= (1 << j);
}

int clr_bit(char *buf, int bit)
{
    int i, j;
    i = bit / 8;
    j = bit % 8;
    buf[i] &= ~(1 << j);
}

int decFreeInodes(int dev)
{
    char buf[BLKSIZE];

    // dec free inodes count in SUPER and GD
    get_block(dev, 1, buf);
    sp = (SUPER *)buf;
    sp->s_free_inodes_count--;
    put_block(dev, 1, buf);

    get_block(dev, 2, buf);
    gp = (GD *)buf;
    gp->bg_free_inodes_count--;
    put_block(dev, 2, buf);
}

int ialloc(int dev)
{
    int i;
    char buf[BLKSIZE];

    // read inode_bitmap block
    get_block(dev, imap, buf);

    for (i = 0; i < ninodes; i++)
    {
        if (tst_bit(buf, i) == 0)
        {
            set_bit(buf, i);
            decFreeInodes(dev);

            put_block(dev, imap, buf);

            return i + 1;
        }
    }
    printf("ialloc(): no more free inodes\n");
    return 0;
}

char *disk = "mydisk";

int main(int argc, char *argv[])
{
    int i, ino;
    char buf[BLKSIZE];

    if (argc > 1)
        disk = argv[1];

    fd = open(disk, O_RDWR);
    if (fd < 0)
    {
        printf("open %s failed\n", disk);
        exit(1);
    }

    // read SUPER block
    get_block(fd, 1, buf);
    sp = (SUPER *)buf;

    ninodes = sp->s_inodes_count;
    nblocks = sp->s_blocks_count;
    nfreeInodes = sp->s_free_inodes_count;
    nfreeBlocks = sp->s_free_blocks_count;
    printf("ninodes=%d nblocks=%d nfreeInodes=%d nfreeBlocks=%d\n",
           ninodes, nblocks, nfreeInodes, nfreeBlocks);

    // read Group Descriptor 0
    get_block(fd, 2, buf);
    gp = (GD *)buf;

    imap = gp->bg_inode_bitmap;
    printf("imap = %d\n", imap);
    getchar();

    for (i = 0; i < 5; i++)
    {
        ino = ialloc(fd);
        printf("allocated ino = %d\n", ino);
    }
}

OUTPUT:

ninodes=184 nblocks=1440 nfreeInodes=145 nfreeBlocks=1384
imap = 9
allocated ino = 40
allocated ino = 41
allocated ino = 42
allocated ino = 43
allocated ino = 44

    * * * 8. WRITE YOUR balloc.c to allocate a FREE disk block; return its bno * * *
CODE:

/******* balloc.c: allocate a free BLOCK, return its block number ******/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode INODE;
typedef struct ext2_dir_entry_2 DIR; // need this for new version of e2fs

#define BLKSIZE 1024

GD *gp;
SUPER *sp;
INODE *ip;
DIR *dp;

/********** globals *************/
int fd;
int imap, bmap; // IMAP and BMAP block number
int ninodes, nblocks, nfreeInodes, nfreeBlocks;

int get_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    read(fd, buf, BLKSIZE);
}

int put_block(int fd, int blk, char buf[])
{
    lseek(fd, (long)blk * BLKSIZE, 0);
    write(fd, buf, BLKSIZE);
}

int tst_bit(char *buf, int bit)
{
    int i, j;
    i = bit / 8;
    j = bit % 8;
    if (buf[i] & (1 << j))
        return 1;
    return 0;
}

int set_bit(char *buf, int bit)
{
    int i, j;
    i = bit / 8;
    j = bit % 8;
    buf[i] |= (1 << j);
}

int clr_bit(char *buf, int bit)
{
    int i, j;
    i = bit / 8;
    j = bit % 8;
    buf[i] &= ~(1 << j);
}

int decFreeBlocks(int dev)
{
    char buf[BLKSIZE];

    // dec free inodes count in SUPER and GD
    get_block(dev, 1, buf);
    sp = (SUPER *)buf;
    sp->s_free_blocks_count--;
    put_block(dev, 1, buf);

    get_block(dev, 2, buf);
    gp = (GD *)buf;
    gp->bg_free_blocks_count--;
    put_block(dev, 2, buf);
}

int balloc(int dev)
{
    int i;
    char buf[BLKSIZE];

    // read block_bitmap block
    get_block(dev, bmap, buf);

    for (i = 0; i < nblocks; i++)
    {
        if (tst_bit(buf, i) == 0)
        {
            set_bit(buf, i);
            decFreeBlocks(dev);

            put_block(dev, bmap, buf);

            return i + 1;
        }
    }
    printf("balloc(): no more free blocks\n");
    return 0;
}

char *disk = "mydisk";

int main(int argc, char *argv[])
{
    int i, bno;
    char buf[BLKSIZE];

    if (argc > 1)
        disk = argv[1];

    fd = open(disk, O_RDWR);
    if (fd < 0)
    {
        printf("open %s failed\n", disk);
        exit(1);
    }

    // read SUPER block
    get_block(fd, 1, buf);
    sp = (SUPER *)buf;

    ninodes = sp->s_inodes_count;
    nblocks = sp->s_blocks_count;
    nfreeInodes = sp->s_free_inodes_count;
    nfreeBlocks = sp->s_free_blocks_count;
    printf("ninodes=%d nblocks=%d nfreeInodes=%d nfreeBlocks=%d\n",
           ninodes, nblocks, nfreeInodes, nfreeBlocks);

    // read Group Descriptor 0
    get_block(fd, 2, buf);
    gp = (GD *)buf;

    bmap = gp->bg_block_bitmap;
    printf("bmap = %d\n", bmap);
    getchar();

    for (i = 0; i < 5; i++)
    {
        bno = balloc(fd);
        printf("allocated bno = %d\n", bno);
    }
}

OUTPUT:

ninodes=184 nblocks=1440 nfreeInodes=140 nfreeBlocks=1384
bmap = 8
allocated bno = 54
allocated bno = 55
allocated bno = 56
allocated bno = 57
allocated bno = 58